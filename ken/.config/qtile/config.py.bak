import os
import re
import socket
import subprocess

from typing import List
from libqtile import bar, layout, widget, hook, extension
from libqtile.config import Click, Drag, Group, Key, Match, Screen, Rule
from libqtile.lazy import lazy
# from libqtile.utils import guess_terminal

mod = "mod4"
mod1 = "alt"
mod2 = "control"
home = os.path.expanduser("~")
# terminal = guess_terminal()
terminal = "alacritty"
browser = "firefox"
fileManager = "dolphin"


@lazy.function
def window_to_prev_group(qtile):
    if qtile.currentWindow is not None:
        i = qtile.groups.index(qtile.currentGroup)
        qtile.currentWindow.togroup(qtile.groups[i - 1].name)


@lazy.function
def window_to_next_group(qtile):
    if qtile.currentWindow is not None:
        i = qtile.groups.index(qtile.currentGroup)
        qtile.currentWindow.togroup(qtile.groups[i + 1].name)


def window_to_previous_screen(qtile, switch_group=False, switch_screen=False):
    i = qtile.screens.index(qtile.current_screen)
    if i != 0:
        group = qtile.screens[i - 1].group.name
        qtile.current_window.togroup(group, switch_group=switch_group)
        if switch_screen == True:
            qtile.cmd_to_screen(i - 1)


def window_to_next_screen(qtile, switch_group=False, switch_screen=False):
    i = qtile.screens.index(qtile.current_screen)
    if i + 1 != len(qtile.screens):
        group = qtile.screens[i + 1].group.name
        qtile.current_window.togroup(group, switch_group=switch_group)
        if switch_screen == True:
            qtile.cmd_to_screen(i + 1)


def init_colors():
    return [["#282c34", "#282c34"],
            ["#1c1f24", "#1c1f24"],
            ["#dfdfdf", "#dfdfdf"],
            ["#ff6c6b", "#ff6c6b"],
            ["#98be65", "#98be65"],
            ["#da8548", "#da8548"],
            ["#51afef", "#51afef"],
            ["#c678dd", "#c678dd"],
            ["#46d9ff", "#46d9ff"],
            ["#a9a1e1", "#a9a1e1"]]


colors = init_colors()

keys = [
    # A list of available commands that can be bound to keys can be found
    # at https://docs.qtile.org/en/latest/manual/config/lazy.html

    # Switch between windows
    # SUPER + ARROW KEYS
    Key([mod], "Left",
        lazy.layout.left(),
        desc="Move focus to left"),
    Key([mod], "Right",
        lazy.layout.right(),
        desc="Move focus to right"),
    Key([mod], "Down",
        lazy.layout.down(),
        desc="Move focus down"),
    Key([mod], "Up",
        lazy.layout.up(),
        desc="Move focus up"),
    Key([mod], "space",
        lazy.layout.next(),
        desc="Move window focus to other window"),

    # Move windows between left/right columns or move up/down in current stack.
    # Moving out of range in Columns layout will create new column.
    # SUPER + SHIFT + ARROW KEYS
    Key([mod, "shift"], "Left",
        lazy.layout.shuffle_left(),
        desc="Move window to the left"),
    Key([mod, "shift"], "Right",
        lazy.layout.shuffle_right(),
        desc="Move window to the right"),
    Key([mod, "shift"], "Down",
        lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "Up",
        lazy.layout.shuffle_up(), desc="Move window up"),

    # Grow windows. If current window is on the edge of screen and direction
    # will be to screen edge - window would shrink.
    # SUPER + CONTROL + ARROW KEYS
    Key([mod, "control"], "Left",
        lazy.layout.grow_left(),
        lazy.layout.grow(),
        lazy.layout.decrease_ratio(),
        lazy.layout.add(),
        desc="Grow window to the left"),
    Key([mod, "control"], "Right",
        lazy.layout.grow_right(),
        lazy.layout.grow(),
        lazy.layout.increase_ratio(),
        lazy.layout.delete(),
        desc="Grow window to the right"),
    Key([mod, "control"], "Down",
        lazy.layout.grow_down(),
        lazy.layout.shrink(),
        lazy.layout.increase_nmaster(),
        desc="Grow window down"),
    Key([mod, "control"], "Up",
        lazy.layout.grow_up(),
        lazy.layout.grow(),
        lazy.layout.decrease_nmaster(),
        desc="Grow window up"),

    # Reset Windows
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),
    # Toggle between different layouts as defined below
    Key([mod], "t", lazy.next_layout(), desc="Toggle between layouts"),
    # Reload the config
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
    # Shutdown qtile
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    # Close window
    Key([mod], "q", lazy.window.kill(), desc="Kill focused window"),

    # Launch Apps
    Key([mod], "r", lazy.spawncmd(), desc="Spawn a command using a prompt widget"),
    Key([mod, "shift"], "Return", lazy.spawn(fileManager)),
    Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),
    Key([mod], "f", lazy.window.toggle_fullscreen()),
    Key([mod], "b", lazy.spawn(browser)),
]

keys.extend([
    # MOVE WINDOW TO NEXT SCREEN
    Key([mod, "shift"], "Right", lazy.function(
        window_to_next_screen, switch_screen=True)),
    Key([mod, "shift"], "Left", lazy.function(
        window_to_previous_screen, switch_screen=True)),
])

groups = []

groups = [
    Group(name="1"),
    Group(name="2"),
    Group(name="3"),
    Group(name="4"),
    Group(name="5"),
    Group(name="6"),
]


for i in groups:
    keys.extend(
        [
            # mod1 + letter of group = switch to group
            Key([mod], i.name, lazy.group[i.name].toscreen()),
            Key([mod], "Tab", lazy.screen.next_group()),
            Key([mod, "shift"], "Tab", lazy.screen.prev_group()),
            # mod1 + shift + letter of group = switch to & move focused window to group
            Key([mod, "shift"], i.name, lazy.window.togroup(
                i.name, switch_group=True)),
        ]
    )


# Default Layout Theme
def init_layout_theme():
    return {"margin": 5,
            "border_width": 2,
            "border_focus": colors[8],
            "border_normal": colors[9]
            }


layout_theme = init_layout_theme()

layouts = [
    # layout.Columns(border_focus_stack=["#d75f5f", "#8f3d3d"], border_width=4),
    layout.Tile(**layout_theme, ratio=0.55),
    # layout.MonadTall(**layout_theme),
    # layout.MonadWide(**layout_theme),
    # layout.Max(),
    layout.Floating(**layout_theme),
    # Try more layouts by unleashing below layouts.
    # layout.Stack(num_stacks=2),
    # layout.Bsp(),
    # layout.Matrix(),

    # layout.RatioTile(),
    # layout.TreeTab(),
    # layout.VerticalTile(),
    # layout.Zoomy(),
]

# WIDGETS FOR THE BAR


def init_widgets_defaults():
    return dict(
        font="Hack Nerd Font",
        fontsize=14,
        padding=4,
        background=colors[1])


widget_defaults = init_widgets_defaults()

extension_defaults = widget_defaults.copy()


def init_widgets_list():
    widgets_list = [
        widget.Sep(
            linewidth=0,
            padding=6,
            foreground=colors[2],
            background=colors[0],
        ), widget.GroupBox(
            font="Hack Nerd Font",
            fontsize=10,
            margin_y=3,
            margin_x=0,
            padding_y=5,
            padding_x=3,
            borderwidth=3,
            active=colors[8],
            inactive=colors[2],
            rounded=True,
            hide_unused=True,
            highlight_color=colors[1],
            highlight_method="line",
            this_current_screen_border=colors[6],
            this_screen_border=colors[4],
            other_current_screen_border=colors[6],
            other_screen_border=colors[4],
            foreground=colors[2],
            background=colors[0]
        ), widget.TextBox(
            text='|',
            font="Hack Nerd Font",
            background=colors[0],
            foreground=colors[1],
            padding=0,
            fontsize=50
        ), widget.CurrentLayoutIcon(
            foreground=colors[9],
            background=colors[0],
            padding=0,
            scale=0.45,
        ), widget.CurrentLayout(
            foreground=colors[9],
            background=colors[0],
            padding=5,
        ), widget.TextBox(
            text='|',
            font="Hack Nerd Font",
            background=colors[0],
            foreground=colors[1],
            padding=0,
            fontsize=50
        ), widget.WindowName(
            foreground=colors[2],
            background=colors[0],
            padding=0,
        ), widget.TextBox(
            text='|',
            font="Hack Nerd Font",
            background=colors[0],
            foreground=colors[1],
            padding=0,
            fontsize=50
        ), widget.Net(
            foreground=colors[2],
            background=colors[0],
            format=' â¤“{down} â¤’{up} ',
        ), widget.TextBox(
            text='|',
            font="Hack Nerd Font",
            background=colors[0],
            foreground=colors[1],
            padding=0,
            fontsize=50
        ), widget.Systray(
            foreground=colors[7],
            background=colors[1],
            padding=5,
            icon_size=17,
        ), widget.Volume(
            foreground=colors[2],
            background=colors[1],
            fmt='{}',
            padding=4,
            fontsize=10,
        ), widget.Sep(
            linewidth=0,
            padding=6,
            background=colors[1]
        ), widget.ThermalSensor(
            foreground=colors[2],
            background=colors[0],
            format='ðŸŒ¡ {temp:.1f}{unit} ',
        ), widget.Sep(
            linewidth=0,
            padding=6,
            background=colors[0]
        ), widget.Battery(
            format='{percent:2.0%} {char} {hour:d}:{min:02d}',
            charge_char='AC',
            discharge_char='DC',
            foreground=colors[4],
            background=colors[1],
            update_interval=1,
            low_percentage=0.3,
            low_foreground=colors[3]
        ), widget.Sep(
            linewidth=0,
            padding=6,
            background=colors[1]
        ), widget.Clock(
            foreground=colors[2],
            background=colors[0],
            format="ðŸ•˜ %d %b, %a %I:%M %p"
        ), widget.Sep(
            linewidth=0,
            padding=6,
            background=colors[0]
        ),
    ]
    return widgets_list


widgets_list = init_widgets_list()


def init_widgets_screen1():
    widgets_screen1 = init_widgets_list()
    return widgets_screen1


def init_widgets_screen2():
    widgets_screen2 = init_widgets_list()
    return widgets_screen2


widgets_screen1 = init_widgets_screen1()
widgets_screen2 = init_widgets_screen2()


def init_screens():
    return [
        Screen(top=bar.Bar(widgets=init_widgets_screen1(), size=30, opacity=0.9)),
        Screen(top=bar.Bar(widgets=init_widgets_screen2(), size=30, opacity=0.9))
    ]


screens = init_screens()
# screens = [
#     Screen(
#         bottom=bar.Bar(
#             [
#                 widget.CurrentLayout(),
#                 widget.GroupBox(),
#                 widget.Prompt(),
#                 widget.WindowName(),
#                 widget.Chord(
#                     chords_colors={
#                         "launch": ("#ff0000", "#ffffff"),
#                     },
#                     name_transform=lambda name: name.upper(),
#                 ),
#                 widget.TextBox("default config", name="default"),
#                 widget.TextBox("Press &lt;M-r&gt; to spawn",
#                                foreground="#d75f5f"),
#                 # NB Systray is incompatible with Wayland, consider using StatusNotifier instead
#                 # widget.StatusNotifier(),
#                 widget.Systray(),
#                 widget.Clock(format="%Y-%m-%d %a %I:%M %p"),
#                 widget.QuickExit(),
#             ],
#             24,
#             # border_width=[2, 0, 2, 0],  # Draw top and bottom borders
#             # border_color=["ff00ff", "000000", "ff00ff", "000000"]  # Borders are magenta
#         ),
#     ),
# ]

# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        *layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
        Match(title="astrill"),
    ]
)
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

# When using the Wayland backend, this can be used to configure input devices.
wl_input_rules = None

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
